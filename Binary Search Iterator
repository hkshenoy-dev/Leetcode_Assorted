/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    
    TreeNode *it;
    map<TreeNode *,TreeNode *> help;
    vector<TreeNode *> t;
    void inorder_traversal(TreeNode *root){
        if(root){
          inorder_traversal(root->left);
          t.push_back(root);
          inorder_traversal(root->right);
        }
    }
    BSTIterator(TreeNode* root) {
       inorder_traversal(root);
       int n=t.size();
       
       for(int i=1;i<n;i++)help[t[i-1]]=t[i];
       
       it=NULL;
    }
    
    int next() {
        if(it==NULL) it=t[0];
        else it=help[it];
        
        return it->val;
    }
    
    bool hasNext() {
        if(it==NULL)return 1;
        if(help.find(it) == help.end())return 0;
        return 1;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
