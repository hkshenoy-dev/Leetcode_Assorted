#include<bits/stdc++.h>
#include <iterator>
#include <iostream>
#include <numeric>
#include <math.h>
#define ll long long
#define ull long
#define mpa make_pair
#define pb push_back
#define ff first
#define pii pair<ll,ll>
#define dd double
#define trace(x) cerr << #x << " : " << x << endl
#define ss second
#define boost ios_base::sync_with_stdio(0)
#define forp(i,a,b) for(ll i=a;i<=b;i++)
#define rep(i,n)    for(ll i=0;i<n;++i)
#define ren(i,n)    for(ll i=n-1;i>=0;i--)
#define forn(i,a,b) for(ll i=a;i>=b;i--)
#define all(c) (c).begin(),(c).end()
#define tr(c,i) for(typeof((c).begin()) i = (c).begin(); i != (c).end();
#define sc(x) scanf("%lld",&x)
#define clr(x,val) memset(x,val,sizeof(x))
#define pr(x) printf("%lld\n",x) 
#define gc getchar
#define pdd pair<dd,dd>
#define read_arr(a,n) for(ll i=1;i<=n;i++)cin>>a[i];
#define init_arr(a,n) for(ll i=1;i<=n;i++)a[i]=n-i+1;
#define prec(x) cout<<fixed<<setprecision(x)
#define fre freopen("input.txt","r",stdin),freopen("output.txt","w",stdout)
#define arr array 
using namespace std;
struct list_node{
   ll v=0;
   list_node *next=NULL;
   ll ind_doc=0;
   list_node(ll g,ll d){
   	   v=g;
   	   ind_doc=d;
   }
};

ll find_doc(list_node *head){
	if(head==NULL){
		return -1;
	}
	ll pos=1;

	while( head and head->ind_doc == 0){
		pos++;
		head=head->next;
	}
	
	if(head==NULL){
		return -1;
	}
	
	return pos;
}

ll get_len(list_node *h){
	if(h==NULL)return 0;
	
	ll l=0;
	
	while(h){
		
		h=h->next;
		l++;
	}
	
	return l;
}

list_node *break_list(ll pos,list_node **head){
	
	pos--;
	list_node *h=*head;
	list_node *h_orig=h,*prev=h;
	
	while(pos--){
		h=h->next;
	}
	

	
	prev=h->next;
	h->next=NULL;
	

	
	if(find_doc(prev)==-1){
		return h_orig;
	}else{
		return prev;
	}

}

void insert_list(ll pos,list_node **head){
	pos--;
	list_node *naya=new list_node(pos+1,0);

	
	list_node *h=*head;
	list_node *h_orig=h,*prev=NULL;
	
	while(pos--){
		prev=h;
		h=h->next;
	}
	
	if(prev){
		prev->next=naya;
		naya->next=h;
	}else{
		naya->next=h;
		*head=naya;
	}

	

	
}


int main(){
	
	ll n,k,m,t;
	cin>>n>>k>>m>>t;
	list_node *multi_verse=new list_node(1,(k==1));
	list_node *head=multi_verse;
	
	for(ll i=2;i<=n;i++){
		multi_verse->next=new list_node(i,k==i);
		multi_verse=multi_verse->next;
	}
	
	
	
	
	
	while(t--){
		ll ty;
		cin>>ty;
		if(ty==0){
			ll ind;
			cin>>ind;
			head=break_list(ind,&head);
			cout<<get_len(head)<<" "<<find_doc(head)<<endl;
		}else{
			ll ind;
			cin>>ind;
			insert_list(ind,&head);
			cout<<get_len(head)<<" "<<find_doc(head)<<endl;
		}
		
	}
	
	
}

	


		
