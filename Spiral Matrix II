class Solution {
public:
    int a[25][25];
    int vis[25][25];
    int lim;
    bool chk(int x,int y){
        if(x>=1 and x<=lim and y>=1 and y<=lim)return 1;
        return 0;
    }
    
    pair<int,pair<int,char> > ret_val(int x,int y,char ch){
        
        if(ch=='R'){
            if(chk(x,y+1) and vis[x][y+1]==0)return {x,{y+1,'R'}};
        }
        
        if(ch=='D'){
            if(chk(x+1,y) and vis[x+1][y]==0)return {x+1,{y,'D'}};
        }
        
        if(ch=='L'){
           if(chk(x,y-1) and vis[x][y-1]==0)return {x,{y-1,'L'}}; 
        }
        
        if(ch=='U'){
           if(chk(x-1,y) and vis[x-1][y]==0)return {x-1,{y,'U'}}; 
        }
        
        if(chk(x,y+1) and vis[x][y+1]==0)return {x,{y+1,'R'}};
        if(chk(x+1,y) and vis[x+1][y]==0)return {x+1,{y,'D'}};
        if(chk(x,y-1) and vis[x][y-1]==0)return {x,{y-1,'L'}};
        if(chk(x-1,y) and vis[x-1][y]==0)return {x-1,{y,'U'}}; 
        return {-1,{-1,'U'}};
        
    }
    vector<vector<int>> generateMatrix(int n) {
        vector< vector<int> > sol; 
        int val=1;
        lim=n;
        int r=1,c=1;
        char ch='R';
        
        while(val<=n*n){
            
            a[r][c]=val;
            vis[r][c]=1;
            
            
            auto nx=ret_val(r,c,ch);
            r=nx.first;
            c=nx.second.first;
            ch=nx.second.second;
            
            cout<<r<<" "<<c<<endl;
            val++;
            
        }
        
        for(int i=1;i<=n;i++){
            vector<int> v;
            for(int j=1;j<=n;j++)v.push_back(a[i][j]);
            sol.push_back(v);
        }
        
        return sol;
        
    }
};
